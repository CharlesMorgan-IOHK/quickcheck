(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Maybe (fun (type) (type)))
        (tyvardecl a (type))
        Maybe_match
        (vardecl Just (fun a [ Maybe a ])) (vardecl Nothing [ Maybe a ])
      )
    )
    (termbind
      (strict)
      (vardecl x [ Maybe (con integer) ])
      [ { Just (con integer) } (con integer 1) ]
    )
    (termbind
      (strict)
      (vardecl y [ Maybe (con integer) ])
      [ { Just (con integer) } (con integer 2) ]
    )
    [
      [
        { [ { Maybe_match (con integer) } x ] [ Maybe (con integer) ] }
        (lam
          p
          (prod (con integer))
          [
            [
              { [ { Maybe_match (con integer) } y ] [ Maybe (con integer) ] }
              (lam
                p
                (prod (con integer))
                [
                  { Just (con integer) }
                  [ [ (builtin addInteger) (proj 0 p) ] (proj 0 p) ]
                ]
              )
            ]
            (lam p (prod ) { Nothing (con integer) })
          ]
        )
      ]
      (lam p (prod ) { Nothing (con integer) })
    ]
  )
)