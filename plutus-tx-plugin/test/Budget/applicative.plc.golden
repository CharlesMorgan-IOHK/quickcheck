(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Maybe (fun (type) (type)))
        (tyvardecl a (type))
        Maybe_match
        (vardecl Just (fun a [ Maybe a ])) (vardecl Nothing [ Maybe a ])
      )
    )
    (termbind
      (strict)
      (vardecl x [ Maybe (con integer) ])
      [ { Just (con integer) } (con integer 1) ]
    )
    (termbind
      (strict)
      (vardecl y [ Maybe (con integer) ])
      [ { Just (con integer) } (con integer 2) ]
    )
    (termbind
      (strict)
      (vardecl ds [ Maybe (fun (con integer) (con integer)) ])
      [
        [
          [
            {
              (abs
                b
                (type)
                (lam
                  dFunctor
                  [
                    (lam
                      f
                      (fun (type) (type))
                      (all
                        a
                        (type)
                        (all b (type) (fun (fun a b) (fun [ f a ] [ f b ])))
                      )
                    )
                    Maybe
                  ]
                  (lam
                    f
                    (fun (con integer) b)
                    (lam
                      fa
                      [ Maybe (con integer) ]
                      [ [ { { dFunctor (con integer) } b } f ] fa ]
                    )
                  )
                )
              )
              (fun (con integer) (con integer))
            }
            (abs
              a
              (type)
              (abs
                b
                (type)
                (lam
                  f
                  (fun a b)
                  (lam
                    ds
                    [ Maybe a ]
                    [
                      [
                        { [ { Maybe_match a } ds ] [ Maybe b ] }
                        (lam p (prod a) [ { Just b } [ f (proj 0 p) ] ])
                      ]
                      (lam p (prod ) { Nothing b })
                    ]
                  )
                )
              )
            )
          ]
          (lam
            x
            (con integer)
            (lam y (con integer) [ [ (builtin addInteger) x ] y ])
          )
        ]
        x
      ]
    )
    [
      [
        {
          [ { Maybe_match (fun (con integer) (con integer)) } ds ]
          [ Maybe (con integer) ]
        }
        (lam
          p
          (prod (fun (con integer) (con integer)))
          [
            [
              { [ { Maybe_match (con integer) } y ] [ Maybe (con integer) ] }
              (lam
                p
                (prod (con integer))
                [ { Just (con integer) } [ (proj 0 p) (proj 0 p) ] ]
              )
            ]
            (lam p (prod ) { Nothing (con integer) })
          ]
        )
      ]
      (lam p (prod ) { Nothing (con integer) })
    ]
  )
)